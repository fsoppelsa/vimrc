" General
colorscheme dracula
set autowrite
au BufNewFile,BufReadPost,FilterReadPost,FileReadPost  * set nospell
set path+=**
set nospell
let g:spf13_bundle_groups=['general', 'python', 'writing', 'programming', 'go', 'c',]
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go', 'python', 'c']  }
let g:indent_guides_guide_size=1
let g:spf13_no_omni_complete = 1
set nobackup
set nowritebackup
set noswapfile

" Code maps
nmap <Leader>n :cnext<CR>
nmap <Leader>p :cprevious<CR>
map :a :Ack!

" Tabs
nmap <silent> <C-k> :tabnext<CR>
nmap <silent> <C-j> :tabprev<CR>
nnoremap <C-t> :tabnew<Space>
inoremap <C-t> <Esc>:tabnew<Space>
" nnoremap <silent> <A-Left> :execute 'silent! tabmove ' . (tabpagenr()-2)<CR>
" nnoremap <silent> <A-Right> :execute 'silent! tabmove ' . tabpagenr()<CR>

" Go build fun
"
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

" C
autocmd FileType c nmap <leader>r :!gcc % && ./a.out <CR>

" Go
"
let $GOPATH="/home/fsoppelsa/go"
au! BufRead,BufNewFile *.go setfiletype go

nnoremap <leader>a :cclose<CR>
autocmd FileType go nmap <leader>r <Plug>(go-run)
autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)
autocmd FileType go nmap <Leader>i <Plug>(go-info)
autocmd FileType go nmap <leader>w <Plug>(go-test)
autocmd FileType go nmap <Leader>q :DlvAddBreakpoint <CR>
autocmd FileType go nmap <Leader>d :DlvDebug <CR>
let g:go_list_type = "quickfix"
let g:go_test_timeout = '10s'
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_fmt_command = "goimports"
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
autocmd Filetype go command! -bang AT call go#alternate#Switch(<bang>0, 'tabe')

" Shifts
let mapleader = ','
autocmd FileType go map <leader>go :w<CR>:GoRun<enter>
autocmd FileType python set tabstop=8 expandtab shiftwidth=4 softtabstop=4
autocmd FileType python set omnifunc=pythoncomplete#Complete

